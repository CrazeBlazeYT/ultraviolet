#! /usr/bin/env ruby
begin
   require 'plist'
rescue LoadError
   require 'rubygems'
   require 'plist'
end

base_dir = File.join( File.dirname(__FILE__), '..', 'render' )


def settings
   unless @settings
      @settings = @theme["settings"].find { |s| ! s["name"] }["settings"]
   end
   @settings
end

def alpha_blend bg, fg
   unless bg =~ /^#((\d|[ABCDEF]){3}|(\d|[ABCDEF]){6}|(\d|[ABCDEF]){8})$/i
      raise(ArgumentError, "Malformed background color '#{bg}'" )
   end
   unless fg =~ /^#((\d|[ABCDEF]){3}|(\d|[ABCDEF]){6}|(\d|[ABCDEF]){8})$/i
      raise(ArgumentError, "Malformed foreground color '#{fg}'" )
   end
   
   if bg.size == 4
      tbg =  (fg[1,1].hex * 0xff / 0xf).to_s(16).upcase.rjust(2, '0')
      tbg += (fg[2,1].hex * 0xff / 0xf).to_s(16).upcase.rjust(2, '0')
      tbg += (fg[3,1].hex * 0xff / 0xf).to_s(16).upcase.rjust(2, '0')
      bg = "##{tbg}"
   end
   
   result = ""
   if fg.size == 4
      result += (fg[1,1].hex * 0xff / 0xf).to_s(16).upcase.rjust(2, '0')
      result += (fg[2,1].hex * 0xff / 0xf).to_s(16).upcase.rjust(2, '0')
      result += (fg[3,1].hex * 0xff / 0xf).to_s(16).upcase.rjust(2, '0')
   elsif fg.size == 9
      if bg.size == 7
         div0 = bg[1..-1].hex
         div1, alpha = fg[1..-1].hex.divmod( 0x100 )
         3.times {      
            div0, mod0 = div0.divmod( 0x100 )
            div1, mod1 = div1.divmod( 0x100 )
            result = ((mod0 * alpha + mod1 * ( 0x100 - alpha ) ) / 0x100).to_s(16).upcase.rjust(2, '0') + result
         } 
      else
         div_a, alpha_a = bg[1..-1].hex.divmod( 0x100 )
         div_b, alpha_b = fg[1..-1].hex.divmod( 0x100 )
         alpha = alpha_a + alpha_b * (0x100 - alpha_a)
         3.times {
            div_b, c_b = div_b.divmod( 0x100 )
            div_a, c_a = div_a.divmod( 0x100 )
            result = ((c_a * alpha_a + ( 0x100 - alpha_a ) * alpha_b * c_b ) / alpha).to_s(16).upcase.rjust(2, '0') + result
         } 
      end
      #result = "FF00FF"
   else
      result = fg[1..-1]
   end
   "##{result}"
end

def normalize_color color, fg = false
   if color
      if fg
         alpha_blend( settings["foreground"] ? settings["foreground"] : "#000000FF", color )
      else
         alpha_blend( settings["background"] ? settings["background"] : "#000000FF", color )
      end
   else
      color
   end
end

puts "Processing #{ARGV[0]}"

@theme = Plist::parse_xml( ARGV[0] )
render = {"name" => @theme["name"]}
css = {}

standard_name = File.basename( ARGV[0] ).downcase.gsub(/\s+/, '_').gsub('.tmtheme', '').gsub(/\W/, '').gsub(/_+/, '_')
code_name = "pre.#{standard_name}"

render["tags"] = []
@theme["settings"].each do |t|
   if t["scope"]
      class_name = t["name"].downcase.gsub(/\W/, ' ').gsub('.tmtheme', '').split(' ').collect{|s| s.capitalize}.join
      if class_name == ""
         class_name = "x" * t["name"].size
      end
      
      tag = {}
      tag["selector"] = t["scope"]
      tag["begin"] = "<span class=\"#{class_name}\">"
      tag["end"] = "</span>"
      render["tags"] << tag
      
      if s = t["settings"]
         style = {}
         style["color"] = normalize_color(s["foreground"], true)
         style["background-color"] = normalize_color(s["background"])
         case s["fontStyle"]
            when /bold/ then style["font-weight"] = "bold"
            when /italic/ then style["font-style"] = "italic"
            when /underline/ then style["text-decoration"] = "underline"
         end
         css[".#{class_name}"] = style
      end
   elsif ! t["name"]
      if s = t["settings"]
         style = {}
         style["color"] = normalize_color(s["foreground"], true)
         style["background-color"] = alpha_blend("#000000FF", s["background"])
         css[code_name] = style
         @style = style
         style = {}
         style["color"] = alpha_blend(s["selection"], s["foreground"])
         style["background-color"] = alpha_blend(s["selection"], s["selection"])
         css[".line-numbers"] = style
         
         tag = {}
         tag["begin"] = "<span class=\"line-numbers\">"
         tag["end"] = "</span>"
         render["line-numbers"] = tag
      end
   end
end

render["filter"] = "CGI.escapeHTML( @escaped )"

tag = {}
tag["begin"] = ""
tag["end"]   = ""
render["line"] = tag


tag = {}
tag["begin"] = "<pre class=\"#{standard_name}\">"
tag["end"]   = "</pre>"
render["listing"] = tag

tag = {}
tag["begin"] = <<END
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">

<head>
  <meta http-equiv="content-type" content="text/html; charset=iso-8859-1" />
  <meta http-equiv="cache-control" content="no-cache" />
  <meta http-equiv="expires" content="3600" />
  <meta name="revisit-after" content="2 days" />
  <meta name="robots" content="index,follow" />
  <meta name="publisher" content="Dichodaemon" />
  <meta name="copyright" content="Dichodaemon" />

  <meta name="author" content="Dichodaemon" />
  <meta name="distribution" content="global" />
  <meta name="description" content="Ocatarinetabellachithchix" />
  <meta name="keywords" content="arzaversperia flexilimosos toves" />
  <link rel="stylesheet" type="text/css" media="screen,projection,print" href="css/#{standard_name}.css" />
  <title>#{standard_name}</title>

</head>

<body>
END

tag["end"] = <<END
  <p>
    <a href="http://validator.w3.org/check?uri=referer">
      <img style="border:0"
           src="http://www.w3.org/Icons/valid-xhtml10"
           alt="Valid XHTML 1.0 Strict" height="31" width="88" />
    </a>
    <a href="http://jigsaw.w3.org/css-validator/check?uri=referer">
      <img style="border:0;width:88px;height:31px"
           src="http://jigsaw.w3.org/css-validator/images/vcss" 
           alt="Valid CSS!" />
    </a>
  </p>
</body>
</html>
END

render["document"] = tag

File.open( File.join( base_dir, "xhtml", "#{standard_name}.render" ), "w" ) {|f| YAML.dump( render, f ) }

File.open( File.join( base_dir, "xhtml", "files", "css", "#{standard_name}.css" ), "w" ) do |f|
   css.each do |key, values|
      if key == code_name
         f.puts "#{code_name} {"
         #puts @style
      else
         f.puts "#{code_name} #{key} {"
      end
      values.each do |style, value|
         f.puts "   #{style}: #{value};" if value
      end
      f.puts "}"
   end
end
