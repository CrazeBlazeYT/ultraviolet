#! /usr/bin/env ruby
begin
   require 'plist'
rescue LoadError
   require 'rubygems'
   require 'plist'
end

base_dir = File.join( File.dirname(__FILE__), '..', 'render' )

def settings
   unless @settings
      @settings = @theme["settings"].find { |s| ! s["name"] }["settings"]
   end
   @settings
end

def normalize_color color
   if color =~ /^#/ && color.size == 9
      div0 = (settings["background"] ? settings["background"][1..-1].hex : 0xFFFFFF )
      div1, alpha = color[1..-1].hex.divmod( 0x100 )
      result = ""
      3.times {
         div0, mod0 = div0.divmod( 0x100 )
         div1, mod1 = div1.divmod( 0x100 )
         result = ((mod1 * alpha + mod0 * ( 0x100 - alpha ) ) / 0x100).to_s(16).upcase.rjust(2, '0') + result
      }
      result = result
      result
   elsif color =~ /^#/ && color.size == 4
      r = (color[0].hex * 256 / 16).to_s(16).upcase.rjust(2, '0')
      g = (color[1].hex * 256 / 16).to_s(16).upcase.rjust(2, '0')
      b = (color[2].hex * 256 / 16).to_s(16).upcase.rjust(2, '0')
      r + g + b
   elsif color =~ /^#/ && color.size == 7
      return color[1..-1]
   end
end

@theme = Plist::parse_xml( ARGV[0] )
render = {"name" => @theme["name"]}
codecolumn = ""
numbercolumn = ""
standard_name = File.basename( ARGV[0] ).downcase.gsub(/\s+/, '_').gsub('.tmtheme', '').gsub(/\W/, '').gsub(/_+/, '_')

render["tags"] = []

@theme["settings"].each do |t|
   if t["scope"]
      class_name = t["name"].downcase.gsub(/\W/, ' ').gsub('.tmtheme', '').split(' ').collect{|s| s.capitalize}.join
      if class_name == ""
         class_name = "x" * t["name"].size
      end
      
      tag = {}
      tag["selector"] = t["scope"]
      render["tags"] << tag
      
      begin_string = ""
      pcount = 0
      if s = t["settings"]
         if s["background"]
            begin_string << "\\colorbox[HTML]{#{normalize_color(s["background"])}}{"
         else
            begin_string << "{"
         end
         pcount += 1
         if s["foreground"]
            begin_string << "\\color[HTML]{#{normalize_color(s["foreground"])}}" 
         end
         case s["fontStyle"]
            when /bold/
               begin_string << "\\textbf{"
               pcount += 1
            when /italic/ 
               begin_string << "\\textit{"
               pcount += 1
            when /underline/ 
               begin_string << "\\underline{"
               pcount += 1
            end
         tag["begin"] = begin_string
         tag["end"] = "}" * pcount
      end
      

   elsif ! t["name"]
      if s = t["settings"]
         codecolumn = "\\newcolumntype{C}{>{"
         codecolumn << "\\color[HTML]{#{normalize_color(s["foreground"])}}" if s["foreground"]
         codecolumn << "\\columncolor[HTML]{#{normalize_color(s["background"])}}" if s["background"]
         codecolumn << "}l}"
         
         numbercolumn = "\\newcolumntype{N}{>{"
         numbercolumn << "\\color[HTML]{#{normalize_color(s["foreground"])}}" if s["foreground"]
         numbercolumn << "\\columncolor[HTML]{#{normalize_color(s["selection"])}}" if s["selection"]
         numbercolumn << "}l}"
         
         tag = {}
         tag["begin"] = "\\texttt{"
         tag["end"] = "}&\\mbox{\\texttt{"
         render["line-numbers"] = tag      end
   end
end

render["filter"] = '@escaped.gsub(/(_|\{|\}|&|\#|\\\\)/, \'\\\\\\\\\1\').gsub(/~/, \'\\\\textasciitilde\').gsub(/ /,\'\\\\hspace{1ex}\').gsub(/\t/,\'\\\\hspace{3ex}\')'

tag = {}
tag["begin"] = ""
tag["end"]  = "}}\\\\"
render["line"] = tag

tag = {}
tag["begin"] = <<END
#{codecolumn}
#{numbercolumn}
\\begin{longtable}{NC}
END

tag["end"]   = <<END
\\end{longtable}
END
render["listing"] = tag

tag = {}
tag["begin"] = <<END
\\documentclass[a4paper,landscape]{article}
\\usepackage{xcolor}
\\usepackage{colortbl}
\\usepackage{longtable}
\\usepackage[left=2cm,top=1cm,right=3cm,nohead,nofoot]{geometry}
\\usepackage[T1]{fontenc}
\\usepackage[scaled]{beramono}
\\begin{document}
END

tag["end"] = <<END
\\end{document}
END

render["document"] = tag

File.open( File.join( base_dir, "latex", "#{standard_name}.render" ), "w" ) {|f| YAML.dump( render, f ) }
