#! /usr/bin/env ruby
begin
   require 'plist'
rescue LoadError
   require 'rubygems'
   require 'plist'
end



def settings
   unless @settings
      @settings = @theme["settings"].find { |s| ! s["name"] }["settings"]
      puts "settings = #{@settings}"
   end
   @settings
end

def normalize_color color
   if color =~ /^#/ && color.size == 9
      puts settings.class
      puts settings["background"]
      div0 = (settings["background"] ? settings["background"][1..-1].hex : 0xFFFFFF )
      div1, alpha = color[1..-1].hex.divmod( 0x100 )
      puts "alpha = ##{alpha.to_s(16).upcase}"
      result = ""
      3.times {
         div0, mod0 = div0.divmod( 0x100 )
         div1, mod1 = div1.divmod( 0x100 )
         puts "chunk = ##{mod1.to_s(16).upcase}"
         result = ((mod1 * alpha + mod0 * ( 0x100 - alpha ) ) / 0x100).to_s(16).upcase + result
      }
      result = "#" + result
      #result = "##{ big, small = ; ((big  * (0xFF - small)) / 0xFF).to_s(16).upcase}"
      #result = "##{ big, small = "0xFFFFFF10".hex.divmod( "0x100".hex); ((big  * small) / 0xFF).to_s(16).upcase}"
      #result = color[0...-2]
      puts "#{color} => #{result}"
      result
   else
      color
   end
end

@theme = Plist::parse_xml( ARGV[0] )
render = {"name" => @theme["name"]}
css = {}

standard_name = File.basename( ARGV[0] ).downcase.gsub(/\s+/, '_').gsub('.tmtheme', '').gsub(/\W/, '').gsub(/_+/, '_')
code_name = "pre.#{standard_name}"

render["tags"] = []
@theme["settings"].each do |t|
   if t["scope"]
      tag = {}
      tag["selector"] = t["scope"]
      class_name = t["name"].downcase.gsub(/\s+/, '_').gsub('.tmtheme', '').gsub(/\W/, '').gsub(/_+/, '_')
      tag["begin"] = "<span class=\"#{class_name}\">"
      tag["end"] = "</span>"
      render["tags"] << tag
      
      
      if s = t["settings"]
         style = {}
         style["color"] = normalize_color(s["foreground"])
         style["background-color"] = normalize_color(s["background"])
         case s["fontStyle"]
            when /bold/ then style["font-weight"] = "bold"
            when /italic/ then style["font-style"] = "italic"
            when /underline/ then style["text-decoration"] = "underline"
         else
            puts s["fontStyle"]
         end
         css[".#{class_name}"] = style
      end
   elsif ! t["name"]
      if s = t["settings"]
         style = {}
         style["color"] = normalize_color(s["foreground"])
         style["background-color"] = normalize_color(s["background"])
         css[code_name] = style
         @style = style
         puts @style
         
         style = {}
         style["color"] = normalize_color(s["foreground"])
         style["background-color"] = normalize_color(s["selection"])
         css[".line-numbers"] = style
         tag = {}
         tag["begin"] = "<span class=\"line-numbers\">"
         tag["end"] = "</span>"
         render["line-numbers"] = tag
      end
   end
end

File.open( "#{standard_name}.render", "w" ) {|f| YAML.dump( render, f ) }

File.open( "#{standard_name}.css", "w" ) do |f|
   css.each do |key, values|
      if key == code_name
         f.puts "#{code_name} {"
         #puts @style
      else
         f.puts "#{code_name} #{key} {"
      end
      values.each do |style, value|
         f.puts "   #{style}: #{value};" if value
      end
      f.puts "}"
   end
end